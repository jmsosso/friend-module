<?php

/**
 * Implements hook_node_info().
 */
function friend_node_info() {
  return [
    'friend' => [
      'name' => t('Friend'),
      'base' => 'friend',
      'description' => t('Friend content type.'),
      'title_label' => t('Name'),
      'locked' => TRUE,
    ],
  ];
}

/**
 * Implements hook_node_type_insert().
 */
function friend_node_type_insert($content_type) {
  if ($content_type->type == 'friend') {
    foreach (_friend_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    foreach (_friend_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle']      = 'friend';

      field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_cron().
 */
function friend_cron() {
  $last_run = variable_get('friend_last_cron', 0);

  if (date('Ymd') != date('Ymd', $last_run)) {
    // New day, lets check birthdays to send emails
    require_once 'src/BirthdayMailer.php';

    $birthdayMailer = new BirthdayMailer();
    $birthdayMailer->checkDates();

    variable_set('friend_last_cron', time());
  }
}

function friend_mail($key, &$message, $params) {
  switch ($key) {
    case 'birthday':
      require_once 'src/BirthdayMailer.php';
      $message['subject'] = BirthdayMailer::getEmailSubject();
      $message['body']    = BirthdayMailer::getEmailBody($params);
      break;
  }
}

/**
 * Implements hook_theme().
 */
function friend_theme($existing, $type, $theme, $path) {
  $theme = [];

  $theme['node__friend'] = [
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--friend',
    'path' => drupal_get_path('module', 'friend') . '/templates',
  ];

  return $theme;
}

/**
 * Implements hook_preprocess_page().
 */
function friend_preprocess_page(&$vars) {
  if (!empty($vars['node'])) {
    $node = $vars['node'];
    if ($node->type == 'friend') {
      $vars['title'] = 'Friend data';
    }
  }
}

/**
 * Implements hook_menu().
 */
function friend_menu() {
  return [
    'search-friends' => [
      'title' => 'Search for friends',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('search_friends_form'),
      'access arguments' => ['access content'],
    ],
    'api/friend-autocomplete-callback' => [
      'page callback' => 'friend_autocomplete_callback',
      'type' => MENU_CALLBACK,
      'access arguments' => ['access content'],
    ],
  ];
}

function search_friends_form($form, &$form_state) {

  $form['friend'] = array(
    '#type' => 'textfield',
    '#title' => t('Type the name of a friend'),
    '#autocomplete_path' => 'api/friend-autocomplete-callback',
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function search_friends_form_validate($form, &$form_state) {
  $title   = $form_state['values']['friend'];
  $matches = [];

  $result = preg_match('/\[([0-9]+)\]$/', $title, $matches);
  if ($result > 0) {
    $node = node_load($matches[$result]);

    if (!empty($node)) {
      $form_state['values']['node'] = $node->nid;
      return;
    }
  }

  form_error($form['friend'], t('Sorry, no friend with name %name can be found', [
    '%name' => $title,
  ]));
}

function search_friends_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form_state['values']['node'];
}

function friend_autocomplete_callback($string = "") {
  $matches = [];

  if ($string) {
    $result = db_select('node')
      ->fields('node', array('nid', 'title'))
      ->condition('type', 'friend')
      ->condition('title', db_like($string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute();

    foreach ($result as $node) {
      $matches[$node->title . " [$node->nid]"] = check_plain($node->title);
    }
  }

  drupal_json_output($matches);
}

function _friend_installed_fields() {
  return [
		'friend_first_name'	=> [
			'field_name'  => 'friend_first_name',
			'type'        => 'text',
			'cardinality' => 1,
      'settings'    => [
        'max_length' => 60,
			],
    ],
		'friend_email'	=> [
			'field_name'  => 'friend_email',
			'type'        => 'text',
			'cardinality' => 1,
      'settings'    => [
        'max_length' => 60,
			],
    ],
    'friend_birthday' => [
      'field_name'  => 'friend_birthday',
      'type'        => 'date',
      'cardinality' => 1,
      'settings'    => [
        'granularity' => drupal_map_assoc(['year', 'month', 'day']),
        'tz_handling' => 'none',
			],
		],
    'friend_avatar' => [
      'field_name'  => 'friend_avatar',
      'type'        => 'image',
      'cardinality' => 1,
		],
  ];
}

function _friend_installed_instances() {
  return [
		'friend_first_name'	=> [
			'field_name' => 'friend_first_name',
			'label' => t('First name'),
			'required' => TRUE,
			'widget' => [
				'type' => 'text_textfield'
      ],
    ],
		'friend_email' => [
			'field_name' => 'friend_email',
			'label' => t('Email address'),
			'required' => TRUE,
			'widget' => [
				'type' => 'text_textfield'
      ],
    ],
		'friend_birthday' => [
			'field_name' => 'friend_birthday',
			'label' => t('Birthday'),
			'required' => TRUE,
			'widget' => [
				'type' => 'date_popup',
      ],
    ],
    'friend_avatar' => [
      'field_name'  => 'friend_avatar',
      'label'       => t('Avatar'),
      'required'    => FALSE,
      'widget' => [
        'type'    => 'image_image',
        'weight'  => 2.10,
      ],
      'display' => [
        'friend_list' => [
          'label' => 'hidden',
          'type' => 'image_link_content__thumbnail',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_form().
 */
function friend_form($node, $form_state) {
  return node_content_form($node, $form_state);
}
